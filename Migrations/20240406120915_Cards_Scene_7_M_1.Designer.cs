// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SouthSeas.Schema.Core;

#nullable disable

namespace SouthSeas.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240406120915_Cards_Scene_7_M_1")]
    partial class Cards_Scene_7_M_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SouthSeas.Schema.Columns.Player", b =>
                {
                    b.Property<Guid>("ColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("column_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Untitled Player")
                        .HasColumnName("name");

                    b.HasKey("ColumnId");

                    b.ToTable("player");
                });

            modelBuilder.Entity("SouthSeas.Schema.Columns.Transform", b =>
                {
                    b.Property<Guid>("ColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("column_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float[]>("Position")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real[]")
                        .HasDefaultValue(new[] { 0f, 0f, 0f })
                        .HasColumnName("position");

                    b.Property<float[]>("Rotation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real[]")
                        .HasDefaultValue(new[] { 0f, 0f, 0f })
                        .HasColumnName("rotation");

                    b.Property<float[]>("Scale")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real[]")
                        .HasDefaultValue(new[] { 1f, 1f, 1f })
                        .HasColumnName("scale");

                    b.HasKey("ColumnId");

                    b.ToTable("transform");
                });

            modelBuilder.Entity("SouthSeas.Schema.Core.SceneRow", b =>
                {
                    b.Property<Guid>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("row_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<Guid?>("OwnerColumnId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner");

                    b.Property<Guid?>("PlayerColumnId")
                        .HasColumnType("uuid")
                        .HasColumnName("player");

                    b.Property<string>("Rank")
                        .HasColumnType("text")
                        .HasColumnName("rank");

                    b.Property<string>("Suit")
                        .HasColumnType("text")
                        .HasColumnName("suit");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<Guid?>("TransformColumnId")
                        .HasColumnType("uuid")
                        .HasColumnName("transform");

                    b.HasKey("RowId");

                    b.HasIndex("OwnerColumnId");

                    b.HasIndex("PlayerColumnId");

                    b.HasIndex("TransformColumnId");

                    b.ToTable("cards_scene_7");
                });

            modelBuilder.Entity("SouthSeas.Schema.Core.SceneRow", b =>
                {
                    b.HasOne("SouthSeas.Schema.Columns.Player", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerColumnId");

                    b.HasOne("SouthSeas.Schema.Columns.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerColumnId");

                    b.HasOne("SouthSeas.Schema.Columns.Transform", "Transform")
                        .WithMany()
                        .HasForeignKey("TransformColumnId");

                    b.Navigation("Owner");

                    b.Navigation("Player");

                    b.Navigation("Transform");
                });
#pragma warning restore 612, 618
        }
    }
}
